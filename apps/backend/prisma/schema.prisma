generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum ClubMembershipStatus {
  NEWBIE
  ACTIVE
  SENIOR
}

enum ReservationStatus {
  NORMAL
  OVERTIME
}

enum BandMembershipStatus {
  PENDING
  ACCEPTED
}

model User {
  id                      Int              @id @default(autoincrement())
  authSchId               String?          @unique
  fullName                String
  email                   String           @unique
  phone                   String?          @unique
  profilePicture          ProfilePicture?
  DormResidency           DormResidency?
  role                    Role             @default(USER)
  clubMembership          ClubMembership?
  clubMembershipUpdatedAt DateTime?
  bandMemberships         BandMembership[]
  reservations            Reservation[]    @relation("Reservations")
  Post                    Post[]
}

model ProfilePicture {
  id       Int    @id @default(autoincrement())
  userId   Int    @unique
  mimeType String
  image    Bytes
  user     User   @relation(fields: [userId], references: [id])
}

model DormResidency {
  id         Int  @id @default(autoincrement())
  userId     Int  @unique
  user       User @relation(fields: [userId], references: [id])
  roomNumber Int
}

model ClubMembership {
  id                 Int                  @id @default(autoincrement())
  userId             Int                  @unique
  user               User                 @relation(fields: [userId], references: [id])
  status             ClubMembershipStatus
  titles             String[]
  hasRoomAccess      Boolean
  isLeadershipMember Boolean
  isGateKeeper       Boolean
  gateKeepingRecords Reservation[]        @relation("GateKeeping")
}

model Band {
  id           Int              @id @default(autoincrement())
  name         String
  email        String?
  webPage      String?
  description  String?
  genres       String[]
  members      BandMembership[]
  reservations Reservation[]
}

model BandMembership {
  id     Int                  @id @default(autoincrement())
  userId Int?
  bandId Int?
  status BandMembershipStatus @default(PENDING)
  band   Band?                @relation(fields: [bandId], references: [id])
  user   User?                @relation(fields: [userId], references: [id])
}

model Reservation {
  id           Int               @id @default(autoincrement())
  userId       Int?
  bandId       Int?
  startTime    DateTime
  endTime      DateTime
  gateKeeperId Int?
  status       ReservationStatus
  band         Band?             @relation(fields: [bandId], references: [id])
  gateKeeper   ClubMembership?   @relation("GateKeeping", fields: [gateKeeperId], references: [id])
  user         User?             @relation("Reservations", fields: [userId], references: [id])
}

model Comment {
  id           Int      @id @default(autoincrement())
  comment      String
  startTime    DateTime
  endTime      DateTime
  isReservable Boolean  @default(false)
}

model Period {
  id        Int      @id @default(autoincrement())
  startDate DateTime
  endDate   DateTime
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  body      String
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}
